from typing import ClassVar, List
from instructor import OpenAISchema
from pydantic import Field
import subprocess

class ExecuteShellCommand(OpenAISchema):
    """
    This tool executes a shell command and returns the output or errors generated by the command.
    
    The tool works by using the subprocess module to run the specified shell command. The output and errors are captured and returned to the user.
    
    Pros:
    - It allows for the execution of shell commands programmatically and can be useful for automation tasks.
    - It captures both the output and errors, providing comprehensive feedback on the command execution.
    
    Cons:
    - The shell environment must be properly configured for the command to execute successfully.
    - There is a potential risk of injection attacks if user input is not properly sanitized.
    
    If you need to execute commands in a more controlled or secure environment, consider using a different tool.
    """
    required_modules: ClassVar[List[str]] = []

    chain_of_thought: str = Field(..., description="Think step by step to determine the correct actions that are needed to be taken in order to complete the task.")

    command: str = Field( 
        ..., description="The shell command to be executed."
    )

    def run(self):
        print(self.command)
        try:
            result = subprocess.run(
                self.command,
                shell=True,
                text=True,
                capture_output=True,
                check=True
            )
            return result.stdout
        except subprocess.CalledProcessError as e:
            return f"An error occurred: {e.stderr}"
