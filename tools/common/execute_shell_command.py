from typing import ClassVar, List
from instructor import OpenAISchema
from pydantic import Field
import subprocess

class ExecuteShellCommand(OpenAISchema):
    """
    This tool executes a bash shell command and returns the output or errors generated by the command.

    IMPORTANT (so note this to the user if something goes wrong): assume you are on a Mac that has Homebrew installed.

    IMPORTANT: you may only run commands that are safe, do not require root access and do not have any side effects. For example, you may not run a command that deletes files or modifies the system in any way.

    IMPORTANT: you may not run commands that require user input. For example, you may not run a command that prompts the user to enter a password.

    IMPORTANT: if a command you run needs to write to a file, you must place it in the sandbox directory.

    The tool works by using the subprocess module to run the specified shell command. The output and errors are captured and returned to the user. Use this tool to get the current date / time or to connect to other servers via wget, curl, etc. Here are some examples of commands that are safe to run:
    curl
    date
    cat
    grep
    awk
    sed
    wget
    diff
    patch
    sort
    ssh
    gzip
    gunzip
    ls
    pwd
    echo

    
    Pros:
    - It allows for the execution of shell commands programmatically and can be useful for automation tasks.
    - It captures both the output and errors, providing comprehensive feedback on the command execution.
    
    Cons:
    - The shell environment must be properly configured for the command to execute successfully.
    - There is a potential risk of injection attacks if user input is not properly sanitized.
    
    If you need to execute commands in a more controlled or secure environment, consider using a different tool.
    """
    required_modules: ClassVar[List[str]] = []

    chain_of_thought: str = Field(..., description="Think step by step to determine the correct actions that are needed to be taken in order to complete the task.")

    command: str = Field( 
        ..., description="The shell command to be executed."
    )

    def run(self):
        print(self.command)
        try:
            result = subprocess.run(
                self.command,
                shell=True,
                text=True,
                capture_output=True,
                check=True
            )
            return "Success" if result.stdout == "" else result.stdout
        except subprocess.CalledProcessError as e:
            return f"An error occurred: {e.stderr}"
